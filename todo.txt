* backup cap task
  -> mysqldump -u blog -p grantbblog_production > bac

   def Mysqldump.full_backup           
        if Rails.env.production?           
           env = "production"
        else
           env = "development"
        end                    
 
        info = YAML::load(IO.read(RAILS_ROOT + "/config/database.yml"))
        mysql_database = info[env]["database"]
        mysql_user = info[env]["username"]
        mysql_password = info[env]["password"]  
        
        
        @temp_dir = "/tmp/mysql-backup"
        FileUtils.mkdir_p @temp_dir
        dump_file = "#{@temp_dir}/dump.sql.gz"
 
        cmd = "mysqldump #{mysql_database} -u #{mysql_user} -p'#{mysql_password}' "
        cmd += "  > #{dump_file}"   
        #"  #{mysql_database}  | gzip > #{dump_file}"
        run(cmd)
 
        ret = File.new(dump_file).read
        FileUtils.rm_rf(@temp_dir)   
        ret              
   end #full_backup
        
 
   def Mysqldump.run(command)
     result = system(command)
     raise("error, process exited with status #{$?.exitstatus}") unless result
   end




* SSL
* Puma

* page titles

* show/edit post: content not positioned nice

* tags
  - cuke tests
  - admin interface
  - tag deletion effects (delete post / delete tag)

* form hint support

* add form hints
  - Nice Url
  - headline

* user crud, including change password

* post.user_id should be nullable, in case of deleted user
  (should be non-null on post-creation though)

* change redcarpet render usage to be like this:
  http://icelab.com.au/articles/render-single-line-markdown-text-with-redcarpet/
